var Set = require('../lib/set');

describe('skip set', function() {
  it('should support basic operations', function() {
    var set = new Set();

    expect(set).to.have.length(0);
    expect(set.values()).to.eql([]);
    expect(set.slice()).to.eql([]);
    expect(set.range()).to.eql([]);
    expect(set.gut()).to.equal(0);

    expect(function() {
      set.add('__proto__');
    }).to.throw();

    expect(set.add('5a600e16')).to.equal(null);
    expect(set.add('5a600e17')).to.equal(null);
    expect(set.add('5a600e18')).to.equal(null);
    expect(set.add('5a600e17')).to.equal('5a600e17');

    expect(set).to.have.length(3);
    expect(set.values()).to.eql(['5a600e16', '5a600e17', '5a600e18']);
    expect(set.values()).to.eql(set.slice());
    expect(set.values()).to.eql(set.range());

    expect(set.has('5a600e16')).to.be.ok;
    expect(set.has('5a600e17')).to.be.ok;
    expect(set.has('5a600e18')).to.be.ok;
    expect(set.has('5a600e19')).to.not.be.ok;

    expect(set.del('5a600e16')).to.equal('5a600e16');

    expect(set).to.have.length(2);

    expect(set.del('5a600e16')).to.equal(null);

    expect(set).to.have.length(2);

    expect(set.has('5a600e16')).to.not.be.ok;

    expect(set.values()).to.eql(['5a600e17', '5a600e18']);
    expect(set.values()).to.eql(set.slice());
    expect(set.values()).to.eql(set.range());

    set.add('5a600e16');
    set.add('5a600e10');
    set.add('5a600e11');
    set.add('5a600e12');
    set.add('5a600e13');
    set.add('5a600e14');
    set.add('5a600e15');
    set.add('5a600e16');

    expect(set).to.have.length(9);

    // no change, so should be O(1)
    set.add('5a600e17');

    expect(set.rank('5a600e17')).to.equal(7);

    expect(set).to.have.length(9);
    expect(set.values()).to.eql(['5a600e10', '5a600e11', '5a600e12',
      '5a600e13', '5a600e14', '5a600e15', '5a600e16', '5a600e17', '5a600e18']);
    expect(set.values()).to.eql(set.slice());
    expect(set.values()).to.eql(set.range());

    expect(set.range('5a600e14', '5a600e15')).to.eql(['5a600e14', '5a600e15']);
  });

  describe('#add', function() {
    it('should support in-place updates', function() {
      var set = new Set({
        hash: 'key',
        compare: function(a, b) {
          return a.value - b.value;
        }
      });

      set.add({key: 'abc', value: 12});
      set.add({key: 'abd', value: 14});
      set.add({key: 'abe', value: 16});

      var prev = set._head.next[0].next.next[0].next;

      set.add({key: 'abd', value: 15});

      var next = set._head.next[0].next.next[0].next;

      // technically shouldn't expect things from internals, but useful for
      // verifying performance behavior
      expect(prev).to.equal(next);

      expect(set.values()).to.eql([
        {key: 'abc', value: 12},
        {key: 'abd', value: 15},
        {key: 'abe', value: 16}
      ]);
    });

    it('should return the old value', function() {
      var set = new Set({
        hash: 'key',
        compare: function(a, b) {
          return a.value - b.value;
        }
      });

      var before = {key: 'abd', value: 14};

      set.add({key: 'abc', value: 12});
      set.add(before);
      set.add({key: 'abe', value: 16});

      var next = {key: 'abd', value: 15};

      var res = set.add(next);

      expect(res).to.equal(before);

      expect(set.values()).to.eql([
        {key: 'abc', value: 12},
        {key: 'abd', value: 15},
        {key: 'abe', value: 16}
      ]);

      res = set.add({key: 'abd', value: 17});

      expect(res).to.equal(next);

      expect(set.values()).to.eql([
        {key: 'abc', value: 12},
        {key: 'abe', value: 16},
        {key: 'abd', value: 17}
      ]);
    });
  });

  describe('#range', function() {
    it('should support special ranges', function() {
      var set = new Set();

      set.add('5a600e11');
      set.add('5a600e16');
      set.add('5a600e18');
      set.add('5a600e17');
      set.add('5a600e15');
      set.add('5a600e10');
      set.add('5a600e14');
      set.add('5a600e12');

      expect(set.range('5a600e17', '5a600e17')).to.eql(['5a600e17']);
      expect(set.range('5a600e13', '5a600e13')).to.eql([]);

      expect(set.range('5a600e14')).to.eql(['5a600e14', '5a600e15', '5a600e16',
        '5a600e17', '5a600e18']);

      expect(set.range(null, '5a600e12')).to.eql(['5a600e10', '5a600e11',
        '5a600e12']);

      expect(set.range(null, null)).to.eql(set.values());
    });
  });

  describe('#get', function() {
    it('should get an item', function() {
      var set = new Set();

      set.add('5a600e11');
      set.add('5a600e16');
      set.add('5a600e18');
      set.add('5a600e17');
      set.add('5a600e15');
      set.add('5a600e10');
      set.add('5a600e14');
      set.add('5a600e12');

      expect(set.get('5a600e10')).to.equal('5a600e10');
      expect(set.get('5a600e19')).to.equal(null);
    });
  });

  describe('#count', function() {
    it('should support special ranges', function() {
      var set = new Set();

      set.add('5a600e11');
      set.add('5a600e16');
      set.add('5a600e18');
      set.add('5a600e17');
      set.add('5a600e15');
      set.add('5a600e10');
      set.add('5a600e14');
      set.add('5a600e12');
      set.add('5a600f10');
      set.add('5a600f11');

      expect(set.count('5a600e17', '5a600e17'))
        .to.equal(set.range('5a600e17', '5a600e17').length);
      expect(set.count('5a600e13', '5a600e13'))
        .to.equal(set.range('5a600e13', '5a600e13').length);

      expect(set.count('5a600e14')).to.equal(set.range('5a600e14').length);

      expect(set.count(null, '5a600e12'))
        .to.equal(set.range(null, '5a600e12').length);

      expect(set.count(null, null)).to.equal(set.range(null, null).length);

      expect(set.count('5a600f02', '5a600f05')).to.equal(0);
    });

    it('should count elements', function() {
      var set = new Set();

      expect(set.count()).to.equal(0);

      set.add('5a600e16');
      set.add('5a600e13');
      set.add('5a600f02');
      set.add('5a600f00');
      set.add('5a600e10');
      set.add('5a600e17');
      set.add('5a600f03');
      set.add('5a600e18');
      set.add('5a600e11');
      set.add('5a600f05');
      set.add('5a600e19');
      set.add('5a600e12');
      set.add('5a600f06');
      set.add('5a600e15');
      set.add('5a600f01');
      set.add('5a600e14');
      set.add('5a600f04');

      expect(set.count()).to.eql(set.range().length);
      expect(set.count('5a600e15')).to.eql(set.range('5a600e15').length);
      expect(set.count('5a600e12', '5a600e14'))
        .to.eql(set.range('5a600e12', '5a600e14').length);
      expect(set.count('5a600e13', '5a600f00'))
        .to.eql(set.range('5a600e13', '5a600f00').length);
      expect(set.count('5a600e13', '5a600e13'))
        .to.eql(set.range('5a600e13', '5a600e13').length);
      expect(set.count('5a600e13', '5a600e10'))
        .to.eql(set.range('5a600e13', '5a600e10').length);
      expect(set.count('5a600f02', '5a600f05'))
        .to.eql(set.range('5a600f02', '5a600f05').length);
      expect(set.count('5a600f07')).to.eql(set.range('5a600f07').length);
    });
  });

  describe('#slice', function() {
    it('should support special ranges', function() {
      var set = new Set();

      set.add('5a600e10');
      set.add('5a600e11');
      set.add('5a600e12');
      set.add('5a600e13');
      set.add('5a600e14');
      set.add('5a600e15');
      set.add('5a600e16');
      set.add('5a600e17');
      set.add('5a600e18');

      var array = set.values();

      expect(set.slice()).to.eql(array);
      expect(set.slice(2)).to.eql(array.slice(2));
      expect(set.slice(8)).to.eql(array.slice(8));
      expect(set.slice(0, 3)).to.eql(array.slice(0, 3));
      expect(set.slice(-1)).to.eql(array.slice(-1));
      expect(set.slice(-4)).to.eql(array.slice(-4));
      expect(set.slice(-4, -2)).to.eql(array.slice(-4, -2));
      expect(set.slice(-4, set.length + 1000))
        .to.eql(array.slice(-4,set.length + 1000));
    });
  });

  describe('#intersect', function() {
    it('should handle fringes', function() {
      expect(Set.intersect()).to.eql([]);

      var a = new Set();

      expect(Set.intersect(a)).to.eql([]);
      expect(Set.intersect(a, a)).to.eql([]);

      a.add('test');

      expect(Set.intersect(a)).to.eql(['test']);
      expect(Set.intersect(a, a)).to.eql(['test']);
      expect(Set.intersect(a, a, a)).to.eql(['test']);
      expect(Set.intersect(a, a, a, a)).to.eql(['test']);
    });

    it('should intersect two sets', function() {
      var a = new Set(), b = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      expect(Set.intersect(a, b)).to.eql(['5a600e10', '5a600e14', '5a600e15',
        '5a600e17', '5a600e19', '5a600e1b', '5a600e1c']);
      expect(Set.intersect(b, a)).to.eql(['5a600e10', '5a600e14', '5a600e15',
        '5a600e17', '5a600e19', '5a600e1b', '5a600e1c']);
    });

    it('should intersect three sets', function() {
      var a = new Set(), b = new Set(), c = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      c.add('5a600e10');
      c.add('5a600e12');
      c.add('5a600e13');
      c.add('5a600e14');
      c.add('5a600e16');
      c.add('5a600e17');
      c.add('5a600e18');
      c.add('5a600e1a');
      c.add('5a600e1c');
      c.add('5a600e1f');

      expect(Set.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',
        '5a600e17', '5a600e1c']);

      expect(Set.intersect(c, a, b)).to.eql(c.intersect(a, b));
    });

    it('should intersect four sets', function() {
      var a = new Set(), b = new Set(), c = new Set(), d = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      c.add('5a600e10');
      c.add('5a600e12');
      c.add('5a600e13');
      c.add('5a600e14');
      c.add('5a600e16');
      c.add('5a600e17');
      c.add('5a600e18');
      c.add('5a600e1a');
      c.add('5a600e1c');
      c.add('5a600e1f');

      d.add('5a600e1c');
      d.add('5a600e17');
      d.add('5a600e1f');
      d.add('5a600e20');

      expect(Set.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);

      expect(Set.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));
    });
  });

  describe('#intersectKeys', function() {
    it('should handle fringes', function() {
      expect(Set.intersectKeys()).to.eql([]);

      var set = new Set({
        hash: 'key',
        compare: 'key'
      });

      expect(Set.intersectKeys(set)).to.eql([]);
      expect(Set.intersectKeys(set, set)).to.eql([]);

      set.add({key: 'test'});

      expect(Set.intersectKeys(set)).to.eql([{key: 'test'}]);
      expect(Set.intersectKeys(set, set)).to.eql([{key: 'test'}]);
      expect(Set.intersectKeys(set, set, set)).to.eql([{key: 'test'}]);
      expect(Set.intersectKeys(set, set, set, set)).to.eql([{key: 'test'}]);
    });

    it('should intersect two sets', function() {
      var a = new Set(), b = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      expect(Set.intersectKeys(a, b)).to.eql(['5a600e10', '5a600e14', '5a600e15',
        '5a600e17', '5a600e19', '5a600e1b', '5a600e1c']);
      expect(Set.intersectKeys(b, a)).to.eql(['5a600e10', '5a600e14', '5a600e15',
        '5a600e17', '5a600e19', '5a600e1b', '5a600e1c']);
    });

    it('should intersect three sets', function() {
      var a = new Set(), b = new Set(), c = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      c.add('5a600e10');
      c.add('5a600e12');
      c.add('5a600e13');
      c.add('5a600e14');
      c.add('5a600e16');
      c.add('5a600e17');
      c.add('5a600e18');
      c.add('5a600e1a');
      c.add('5a600e1c');
      c.add('5a600e1f');

      expect(Set.intersectKeys(c, a, b)).to.eql(['5a600e10', '5a600e14',
        '5a600e17', '5a600e1c']);

      expect(Set.intersectKeys(c, a, b)).to.eql(c.intersectKeys(a, b));
    });

    it('should intersect four sets', function() {
      var a = new Set(), b = new Set(), c = new Set(), d = new Set();

      a.add('5a600e10');
      a.add('5a600e12');
      a.add('5a600e14');
      a.add('5a600e15');
      a.add('5a600e17');
      a.add('5a600e18');
      a.add('5a600e19');
      a.add('5a600e1a');
      a.add('5a600e1b');
      a.add('5a600e1c');
      a.add('5a600e1e');

      b.add('5a600e10');
      b.add('5a600e11');
      b.add('5a600e13');
      b.add('5a600e14');
      b.add('5a600e15');
      b.add('5a600e17');
      b.add('5a600e19');
      b.add('5a600e1b');
      b.add('5a600e1c');
      b.add('5a600e1d');
      b.add('5a600e1f');

      c.add('5a600e10');
      c.add('5a600e12');
      c.add('5a600e13');
      c.add('5a600e14');
      c.add('5a600e16');
      c.add('5a600e17');
      c.add('5a600e18');
      c.add('5a600e1a');
      c.add('5a600e1c');
      c.add('5a600e1f');

      d.add('5a600e1c');
      d.add('5a600e17');
      d.add('5a600e1f');
      d.add('5a600e20');

      expect(Set.intersectKeys(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);

      expect(Set.intersectKeys(d, c, a, b)).to.eql(d.intersectKeys(c, a, b));
    });
  });

  describe('#rank', function() {
    it('should get the correct rank', function() {
      var set = new Set();

      set.add('5a600e12');
      set.add('5a600e13');
      set.add('5a600e15');
      set.add('5a600e17');
      set.add('5a600e18');
      set.add('5a600e11');
      set.add('5a600e14');
      set.add('5a600e16');
      set.add('5a600e10');

      expect(set.rank('5a600e12')).to.equal(2);
      expect(set.rank('5a600e13')).to.equal(3);
      expect(set.rank('5a600e16')).to.equal(6);
      expect(set.rank('5a600e15')).to.equal(5);

      expect(set.rank('not in set')).to.equal(-1);
    });
  });

  describe('#del', function() {
    it('should delete special elements', function() {
      var set = new Set();

      set.add('5a600e18');
      set.add('5a600e13');
      set.add('5a600e10');
      set.add('5a600e11');
      set.add('5a600e14');
      set.add('5a600e12');
      set.add('5a600e16');
      set.add('5a600e15');
      set.add('5a600e17');

      expect(set.del('5a600e18')).to.equal('5a600e18');

      expect(set).to.have.length(8);

      expect(set.del('5a600e10')).to.equal('5a600e10');

      expect(set).to.have.length(7);

      expect(set.values()).to.eql(['5a600e11', '5a600e12', '5a600e13',
        '5a600e14', '5a600e15', '5a600e16', '5a600e17']);
    });

    it('should delete many elements', function() {
      var set = new Set();

      set.add('5a600e10');
      set.add('5a600e12');
      set.add('5a600e15');
      set.add('5a600e14');
      set.add('5a600e17');
      set.add('5a600e11');
      set.add('5a600e16');
      set.add('5a600e18');
      set.add('5a600e13');

      expect(set.del('5a600e11')).to.equal('5a600e11');
      expect(set.del('5a600e13')).to.equal('5a600e13');
      expect(set.del('5a600e14')).to.equal('5a600e14');
      expect(set.del('5a600e15')).to.equal('5a600e15');
      expect(set.del('5a600e16')).to.equal('5a600e16');
      expect(set.del('5a600e17')).to.equal('5a600e17');

      expect(set.length).to.equal(3);
      expect(set.values()).to.eql(['5a600e10', '5a600e12', '5a600e18']);
    });
  });

  describe('#gut', function() {
    it('should strip out a range of elements', function() {
      var set = new Set();

      set.add('5a600e11');
      set.add('5a600e10');
      set.add('5a600e12');
      set.add('5a600e17');
      set.add('5a600e18');
      set.add('5a600e13');
      set.add('5a600e15');
      set.add('5a600e16');
      set.add('5a600e14');

      expect(set.gut('5a600e12', '5a600e16')).to.equal(5);
      expect(set).to.have.length(4);

      expect(set.values()).to.eql(['5a600e10', '5a600e11', '5a600e17',
        '5a600e18']);
    });

    it('should strip out all the elements', function() {
      var set = new Set();

      set.add('5a600e16');
      set.add('5a600e14');
      set.add('5a600e17');
      set.add('5a600e13');
      set.add('5a600e11');
      set.add('5a600e15');
      set.add('5a600e10');
      set.add('5a600e12');
      set.add('5a600e18');

      expect(set.gut('5a600e09', '5a600e19')).to.equal(9);
      expect(set).to.have.length(0);

      expect(set.values()).to.eql([]);
    });
  });

  describe('#gutSlice', function() {
    it('should strip out a slice of elements', function() {
      var set = new Set();

      set.add('5a600e17');
      set.add('5a600e12');
      set.add('5a600e14');
      set.add('5a600e10');
      set.add('5a600e11');
      set.add('5a600e16');
      set.add('5a600e18');
      set.add('5a600e13');
      set.add('5a600e15');

      expect(set.gutSlice(1, 6)).to.equal(5);
      expect(set).to.have.length(4);

      expect(set.values()).to.eql(['5a600e10', '5a600e16', '5a600e17',
        '5a600e18']);
    });

    it('should strip out all elements', function() {
      var set = new Set();

      set.add('5a600e12');
      set.add('5a600e13');
      set.add('5a600e15');
      set.add('5a600e18');
      set.add('5a600e10');
      set.add('5a600e17');
      set.add('5a600e16');
      set.add('5a600e11');
      set.add('5a600e14');

      expect(set.gutSlice(0, 9)).to.equal(9);
      expect(set).to.have.length(0);

      expect(set.values()).to.eql([]);
    });
  });

  describe('#empty', function() {
    it('should remove all elements', function() {
      var set = new Set();

      set.add('5a600e10');
      set.add('5a600e11');
      set.add('5a600e12');
      set.add('5a600e13');
      set.add('5a600e14');
      set.add('5a600e15');
      set.add('5a600e16');
      set.add('5a600e17');
      set.add('5a600e18');

      set.empty();

      expect(set).to.have.length(0);
      expect(set.values()).to.eql([]);
    });
  });

  describe('#each', function() {
    it('should iterate through the elements', function() {
      var set = new Set();

      set.add('5a600e16');
      set.add('5a600e11');
      set.add('5a600e10');
      set.add('5a600e17');
      set.add('5a600e13');
      set.add('5a600e12');
      set.add('5a600e15');
      set.add('5a600e18');
      set.add('5a600e14');

      var order = set.values();

      set.each(function(item) {
        expect(this).to.equal(set);
        expect(item).to.equal(order.shift());
      });
    });

    it('should use provided context', function() {
      var set = new Set();

      set.add('5a600e12');
      set.add('5a600e11');
      set.add('5a600e10');

      var order = set.values();

      set.each(function(item) {
        expect(this).to.equal(order);
        expect(item).to.equal(order.shift());
      }, order);
    });
  });

  describe('#map', function() {
    it('should map elements efficiently', function() {
      var set = new Set();

      set.add(2);
      set.add(4);
      set.add(0);

      expect(set.values()).to.eql([0, 2, 4]);

      set.map(function(item) {
        if (item > 0)
          return item + 1;
        return item;
      });

      expect(set.values()).to.eql([0, 3, 5]);
    });

    it('should map elements without key changes', function() {
      var set = new Set({
        hash: 'key',
        compare: 'value'
      });

      set.add({key: '5a600e10', value: 0});
      set.add({key: '5a600e12', value: 2});
      set.add({key: '5a600e14', value: 4});

      expect(set.values()).to.eql([
        {key: '5a600e10', value: 0},
        {key: '5a600e12', value: 2},
        {key: '5a600e14', value: 4}
      ]);

      set.map(function(item) {
        if (item.value > 0)
          item.value++;
        return item;
      });

      expect(set.values()).to.eql([
        {key: '5a600e10', value: 0},
        {key: '5a600e12', value: 3},
        {key: '5a600e14', value: 5}
      ]);
    });

    it('should fall back on failure', function() {
      var set = new Set();

      set.add(2);
      set.add(4);
      set.add(0);

      expect(set.values()).to.eql([0, 2, 4]);

      set.map(function(item) {
        return -item;
      });

      expect(set.values()).to.eql([-4, -2, -0]);
    });

    it('should in-place update with conflicts', function() {
      var set = new Set();

      set.add(0);
      set.add(1);
      set.add(2);
      set.add(5);

      expect(set.values()).to.eql([0, 1, 2, 5]);

      set.map(function(item) {
        return item + 1;
      });

      expect(set.values()).to.eql([1, 2, 3, 6]);

      set.add(2);

      set.map(function(item) {
        return item + 1;
      });

      expect(set.values()).to.eql([2, 3, 3, 4, 7]);
    });
  });

  describe('unique', function() {
    it('should ensure values are unique', function() {
      var set = new Set({
        unique: true,
        hash: 'id',
        compare: function(a, b) {
          return a.value - b.value;
        }
      });

      set.add({
        id: '5a600e10',
        value: 16
      });
      set.add({
        id: '5a600e11',
        value: 6
      });
      set.add({
        id: '5a600e12',
        value: 17
      });
      set.add({
        id: '5a600e13',
        value: 11
      });
      set.add({
        id: '5a600e14',
        value: 14
      });
      set.add({
        id: '5a600e15',
        value: 19
      });
      set.add({
        id: '5a600e16',
        value: 3
      });
      set.add({
        id: '5a600e17',
        value: 12
      });
      set.add({
        id: '5a600e18',
        value: 10
      });

      expect(function() {
        set.add({
          id: '5a600e19',
          value: 11
        });
      }).to.throw(/unique/);

      // quick exit test
      expect(function() {
        set.add({
          id: '5a600dff',
          value: set._head.next[set._level - 1].next.value.value
        });
      }).to.throw(/unique/);

      // this test ensures the key < key check doesn't come into play
      expect(function() {
        set.add({
          id: '5a600dff',
          value: 11
        });
      }).to.throw(/unique/);

      expect(function() {
        set.add({
          id: '5a600e18',
          value: 10
        });
      }).to.not.throw();

      expect(set).to.have.length(9);

      expect(set.values()).to.eql([{
        id: '5a600e16',
        value: 3
      }, {
        id: '5a600e11',
        value: 6
      }, {
        id: '5a600e18',
        value: 10
      }, {
        id: '5a600e13',
        value: 11
      }, {
        id: '5a600e17',
        value: 12
      }, {
        id: '5a600e14',
        value: 14
      }, {
        id: '5a600e10',
        value: 16
      }, {
        id: '5a600e12',
        value: 17
      }, {
        id: '5a600e15',
        value: 19
      }])
    });

    it('should revert keys if constraint broken during update', function() {
      var set = new Set({
        unique: true,
        hash: 'id',
        compare: function(a, b) {
          return a.value - b.value;
        }
      });

      set.add({
        id: '5a600e10',
        value: 16
      });
      set.add({
        id: '5a600e11',
        value: 6
      });
      set.add({
        id: '5a600e12',
        value: 17
      });
      set.add({
        id: '5a600e13',
        value: 11
      });
      set.add({
        id: '5a600e14',
        value: 14
      });
      set.add({
        id: '5a600e15',
        value: 19
      });
      set.add({
        id: '5a600e16',
        value: 3
      });
      set.add({
        id: '5a600e17',
        value: 12
      });
      set.add({
        id: '5a600e18',
        value: 10
      });

      expect(function() {
        set.add({
          id: '5a600e13',
          value: 14
        });
      }).to.throw(/unique/);

      expect(set).to.have.length(9);
      expect(set.get({id: '5a600e13'})).to.eql({id: '5a600e13', value: 11});
    });
  });
});
