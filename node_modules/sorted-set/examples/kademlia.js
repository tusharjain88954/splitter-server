// the kademlia xor distance between node identifiers

// borrowed from tristanls/k-bucket
function distance(first, second) {
  var max = Math.max(first.length, second.length);
  var accumulator = '';
  for (var i = 0; i < max; i++) {
    if (first[i] === undefined || second[i] === undefined) {
      accumulator += (0xff).toString(16);
    } else {
      accumulator += (first[i] ^ second[i]).toString(16);
    }
  }
  return parseInt(accumulator, 16);
}

var Set = require('..');

var master = new Buffer('1b5f81759d0eb174ae70d985b603832c', 'hex');

var set = new Set({
  hash: function(value) {
    return value.toString('hex');
  },
  compare: function(a, b) {
    return distance(new Buffer(a, 'hex'), master) -
           distance(new Buffer(b, 'hex'), master);
  }
});

set.add('278264615485822a68edf4ab80f4fe99');
set.add('8c09374ac0b2c8cc9f8ccd5ab3fee675');
set.add('21a649940dac3089b7b8e2b260c3624f');
set.add('8cd0faa074174ce6a544f0b2b8bc7bdd');
set.add('dd0c058055b99e1f403843ccf01c6669');
set.add('23c939af169942f3f3a803210fc91127');
set.add('a0407eeaff7683bd6bc706369a637960');
set.add('a6cd1d97a88583416b95396671b4b50b');

// set contains nodes ordered by distance to master
