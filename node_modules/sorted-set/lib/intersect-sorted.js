function sparseBinaryIntersect(a, b) {
  var result = [], i = a._head.next[0].next, j = b._head.next[0].next;
  while (i && j) {
    var cmp = a._compare(i.value, j.value);
    if (cmp === 0) {
      result.push(i.value);
      i = i.next[0].next;
      j = j.next[0].next;
    } else if (cmp < 0) {
      i = a._next(j.value, i);
    } else {
      j = b._next(i.value, j);
    }
  }
  return result;
}

function denseBinaryIntersect(a, b) {
  var result = [], i = a._head.next[0].next, j = b._head.next[0].next;
  while (i && j) {
    var cmp = a._compare(i.value, j.value);
    if (cmp === 0) {
      result.push(i.value);
      i = i.next[0].next;
      j = j.next[0].next;
    } else if (cmp < 0) {
      i = i.next[0].next;
    } else {
      j = j.next[0].next;
    }
  }
  return result;
}

function sparseTernaryIntersect(a, b, c) {
  var result = [];
  var i = a._head.next[0].next, j = b._head.next[0].next, k = c._head.next[0].next;
  while (i && j && k) {
    var x = a._compare(i.value, j.value), y = b._compare(j.value, k.value);
    // a == b && b == c
    if (x === 0 && y === 0) {
      result.push(i.value);
      i = i.next[0].next;
      j = j.next[0].next;
      k = k.next[0].next;
    } else {
      // move a if b is greater
      if (x < 0)
        i = a._next(j.value, i);
      // move a if c is greater
      else if (x === 0 && y < 0)
        i = a._next(k.value, i);
      // move b if a is greater
      if (x > 0)
        j = i && b._next(i.value, j);
      // move b if c is greater
      else if (y < 0)
        j = b._next(k.value, j);
      // move c if a or b is greater
      if (y > 0)
        k = j && c._next(j.value, k);
      // move c if a is greater
      else if (y === 0 && x > 0)
        k = i && c._next(i.value, k);
    }
  }
  return result;
}

// probably rarely used, if at all
function denseTernaryIntersect(a, b, c) {
  var result = [];
  var i = a._head.next[0].next, j = b._head.next[0].next, k = c._head.next[0].next;
  while (i && j && k) {
    var x = a._compare(i.value, j.value), y = b._compare(j.value, k.value);
    // a == b && b == c
    if (x === 0 && y === 0) {
      result.push(i.value);
      i = i.next[0].next;
      j = j.next[0].next;
      k = k.next[0].next;
    } else {
      // move a if b or c is greater
      if (x < 0 || (x === 0 && y < 0))
        i = i.next[0].next;
      // move b if a or c is greater
      if (x > 0 || y < 0)
        j = j.next[0].next;
      // move c if a or b is greater
      if (y > 0 || (y === 0 && x > 0))
        k = k.next[0].next;
    }
  }
  return result;
}

function preIntersect(sets) {
  if (!sets.length)
    return [];
  if (sets.length === 1)
    return sets[0].values();
  for (var i = sets.length - 1; i >= 0; i--)
    if (!sets[i].length) // abort
      return [];
}

function sparseIntersect(sets) {
  if (sets.length === 2)
    return sparseBinaryIntersect(sets[0], sets[1]);
  if (sets.length === 3)
    return sparseTernaryIntersect(sets[0], sets[1], sets[2]);
}

function denseIntersect(sets) {
  if (sets.length === 2)
    return denseBinaryIntersect(sets[0], sets[1]);
  if (sets.length === 3)
    return denseTernaryIntersect(sets[0], sets[1], sets[2]);
}

function intersect(sets) {
  // TODO: when to use dense intersection?
  var result = preIntersect(sets) || sparseIntersect(sets);
  if (result)
    return result;
  result = [];
  var order = sets.map(function(set) {
    return {
      set: set,
      node: set._head.next[0].next
    };
  }).sort(function(a, b) {
    return a.set._compare(a.node.value, b.node.value);
  });
  var next = order.shift(), node, n = sets.length - 2;
  // don't break this loop!
  for (;;) {
    while (next.node && next.set._compare(next.node.value, order[n].node.value) !== 0) {
      node = next.set._next(order[n].node.value, next.node);
      if (!node)
        return result;
      next.node = node;
      order.push(next);
      next = order.shift();
    }
    result.push(next.node.value);
    if (!(node = next.node.next[0].next))
      return result;
    next.node = node;
    order.push(next);
    next = order.shift();
  }
}

module.exports = intersect;
